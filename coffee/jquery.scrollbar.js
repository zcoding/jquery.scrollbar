// Generated by CoffeeScript 1.8.0
(function() {
  var colors, defaults;

  defaults = {
    classNames: {
      content: "m-content",
      scrollbar: "m-scrollbar",
      controlbar: "u-bar"
    },
    position: "right",
    always: false,
    outerScroll: false,
    baseZIndex: 10
  };

  colors = {
    gray: "#AAAAAA",
    lightGray: "#BBBBBB",
    lessGray: "#DDDDDD",
    darkGray: "#888888"
  };

  $.fn.scrollbar = function(options) {
    var $content, $controlbar, $doc, $scrollbar, $this, Always, BorderRadius, ContentHeight, DELTA, Drag, Events, Handlers, Height, HeightRatio, Namespace, Position, Scope, ScrollbarBorder, ScrollbarWidth, css, render, zIndex;
    options = $.extend({}, defaults, options);
    Always = options.always;
    $this = $(this);
    $doc = $(document);
    Namespace = "z_scroll";
    Events = {
      mousedown: "mousedown." + Namespace,
      mouseup: "mouseup." + Namespace,
      mousewheel: "mousewheel." + Namespace,
      mousemove: "mousemove." + Namespace,
      click: "click." + Namespace,
      mouseenter: "mouseenter." + Namespace,
      mouseleave: "mouseleave." + Namespace
    };
    $this.off("." + Namespace);
    $doc.off("." + Namespace);
    $this.css({
      overflow: "hidden",
      position: "relative"
    });
    options.position = /left|right/i.test(options.position) ? options.position : 'right';
    $scrollbar = $this.children("." + options.classNames.scrollbar);
    $content = $this.children("." + options.classNames.content);
    $controlbar = $scrollbar.children();
    BorderRadius = 10;
    ScrollbarWidth = 12;
    ScrollbarBorder = 0;
    Height = options.height || $this.outerHeight();
    ContentHeight = options.contentHeight || $content.outerHeight();
    HeightRatio = Height / ContentHeight;
    zIndex = {
      content: $content.css("zIndex"),
      container: $this.css("zIndex"),
      scrollbar: $scrollbar.css("zIndex")
    };
    if (zIndex.content === "auto") {
      if (zIndex.container === "auto") {
        zIndex.container = options.baseZIndex;
      }
      zIndex.content = zIndex.container + 1;
      zIndex.scrollbar = zIndex.content + 1;
    }
    css = {
      scrollbar: {
        position: "absolute",
        top: 0,
        borderRadius: BorderRadius,
        cursor: "default",
        width: ScrollbarWidth,
        height: Height,
        background: colors.lessGray,
        zIndex: zIndex.scrollbar
      },
      controlbar: {
        position: "absolute",
        top: 0,
        left: 0,
        borderRadius: BorderRadius,
        cursor: "default",
        width: ScrollbarWidth,
        height: "" + (HeightRatio * 100) + "%",
        backgroundColor: colors.lightGray
      },
      content: {
        position: "absolute",
        top: 0,
        left: 0,
        zIndex: zIndex.content
      }
    };
    css.scrollbar[options.position] = 0;
    if (ContentHeight < Height && !Always) {
      css.scrollbar["display"] = "none";
    }
    $scrollbar.css(css.scrollbar);
    $controlbar.css(css.controlbar);
    $content.css(css.content);
    if (!$controlbar.hasClass(options.classNames.controlbar)) {
      $controlbar.addClass(options.classNames.controlbar);
    }
    render = function(heightRatio) {
      $controlbar.css({
        top: 0,
        height: "" + (heightRatio * 100) + "%"
      });
      $content.css({
        top: 0
      });
      if (heightRatio === 1 && !Always) {
        return $scrollbar.hide();
      } else {
        return $scrollbar.show();
      }
    };
    DELTA = 50;
    Position = {
      content: 0,
      control: 0,
      mouse: 0,
      tmpContent: 0,
      tmpControl: 0
    };
    Scope = {
      content: {
        min: Height - ContentHeight,
        max: 0
      },
      control: {
        min: 0,
        max: Height * (1 - HeightRatio)
      }
    };
    Drag = false;
    Handlers = {
      mousewheel: function(evt) {
        var move, scrollMove;
        move = Position.content + DELTA * evt.deltaY;
        move = move > Scope.content.max ? Scope.content.max : move;
        move = move < Scope.content.min ? Scope.content.min : move;
        Position.content = move;
        $content.css("top", Position.content);
        scrollMove = -move * HeightRatio;
        scrollMove = scrollMove > Scope.control.max ? Scope.control.max : scrollMove;
        scrollMove = scrollMove < Scope.control.min ? Scope.control.min : scrollMove;
        Position.control = scrollMove;
        $controlbar.css("top", Position.control);
        if (!options.outerScroll) {
          evt.stopPropagation();
          evt.preventDefault();
        }
        return true;
      },
      click: function(evt) {
        var $target, delta, move, scrollMove;
        $target = $(evt.target);
        if ($target.is("." + options.classNames.controlbar)) {
          return false;
        }
        delta = evt.pageY > Position.control + Height * HeightRatio ? DELTA : -DELTA;
        scrollMove = Position.control + delta;
        scrollMove = scrollMove > Scope.control.max ? Scope.control.max : scrollMove;
        scrollMove = scrollMove < Scope.control.min ? Scope.control.min : scrollMove;
        Position.control = scrollMove;
        $controlbar.animate({
          "top": scrollMove
        }, 100, "swing");
        move = Position.content - delta / HeightRatio;
        move = move > Scope.content.max ? Scope.content.max : move;
        move = move < Scope.content.min ? Scope.content.min : move;
        Position.content = move;
        $content.animate({
          "top": move
        }, 100, "swing");
        return true;
      },
      mousedown: function(evt) {
        Drag = true;
        Position.mouse = evt.pageY;
        Position.tmpControl = Position.control;
        Position.tmpContent = Position.content;
        $controlbar.css("backgroundColor", colors.darkGray);
        $doc.on(Events.mousemove, Handlers.mousemove);
        return true;
      },
      mouseup: function(evt) {
        var $target;
        if (Drag) {
          Drag = false;
          Position.control = Position.tmpControl;
          Position.content = Position.tmpContent;
          Position.mouse = 0;
          Position.tmpContent = 0;
          Position.tmpControl = 0;
          $target = $(evt.target);
          if ($target.is("." + options.classNames.controlbar)) {
            $controlbar.css("backgroundColor", colors.gray);
          } else {
            $controlbar.css("backgroundColor", colors.lightGray);
          }
          $doc.off(Events.mousemove);
        }
        return true;
      },
      mousemove: function(evt) {
        var deltaY, move, scrollMove;
        deltaY = evt.pageY - Position.mouse;
        scrollMove = Position.control + deltaY;
        scrollMove = scrollMove > Scope.control.max ? Scope.control.max : scrollMove;
        scrollMove = scrollMove < Scope.control.min ? Scope.control.min : scrollMove;
        $controlbar.css("top", scrollMove);
        Position.tmpControl = scrollMove;
        move = Position.content - deltaY / HeightRatio;
        move = move > Scope.content.max ? Scope.content.max : move;
        move = move < Scope.content.min ? Scope.content.min : move;
        $content.css("top", move);
        Position.tmpContent = move;
        evt.preventDefault();
        evt.stopPropagation();
        return true;
      },
      mouseenter: function(evt) {
        if (!Drag) {
          $controlbar.css("backgroundColor", colors.gray);
        }
        return true;
      },
      mouseleave: function(evt) {
        if (!Drag) {
          $controlbar.css("backgroundColor", colors.lightGray);
        }
        return true;
      }
    };
    $this.on(Events.mousewheel, Handlers.mousewheel);
    $this.on(Events.mousedown, "." + options.classNames.controlbar, Handlers.mousedown);
    $this.on(Events.click, "." + options.classNames.scrollbar, Handlers.click);
    $this.on(Events.mouseenter, "." + options.classNames.controlbar, Handlers.mouseenter);
    $this.on(Events.mouseleave, "." + options.classNames.controlbar, Handlers.mouseleave);
    $doc.on(Events.mouseup, Handlers.mouseup);
    return {
      repaint: function(contentHeight, rendering) {
        if (rendering == null) {
          rendering = function() {
            return false;
          };
        }
        ContentHeight = contentHeight || $content.outerHeight();
        HeightRatio = Height / ContentHeight;
        Scope.content.min = Height - ContentHeight;
        Scope.control.max = Height * (1 - HeightRatio);
        if (HeightRatio > 1) {
          Scope.content.min = 0;
          Scope.control.max = 0;
          HeightRatio = 1;
        }
        Position.content = 0;
        Position.control = 0;
        rendering.apply();
        return render(HeightRatio);
      },
      hide: function() {
        return $scrollbar.hide();
      },
      show: function() {
        return $scrollbar.show();
      }
    };
  };

}).call(this);
